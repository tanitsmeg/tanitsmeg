imports:
    - { resource: parameters.yml }
    - { resource: @DNTMBundle/Resources/config/parameters.yml }
    - { resource: security.yml }
    - { resource: @DNTMBundle/Resources/config/admin.yml }
    - { resource: @DNTMBundle/Resources/config/forms.yml }
    - { resource: admin.yml }
    - { resource: sonata_media.yml }

framework:
    #esi:             ~
    translator:      { fallback: "%locale%" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    exception_controller:  DNTMBundle:Exception:showException
    
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

    globals:
#        utilityService: "@dn.tm.utilityservice"
#        pagerfanta_opts:
#            container_template: '<nav class="pagination">%%pages%%</nav>'
#        api_domain: "%api_domain%"

    form:
        resources:
            - 'SonataCoreBundle:Form:datepicker.html.twig'
            
# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ DNTMBundle ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        sass:
            bin: "%sass_path%"
            apply_to: "\.scss$"
            load_paths:
                - "%kernel.root_dir%/Resources/sass/"
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

braincrafted_bootstrap:
    less_filter: sass
    jquery_path: %kernel.root_dir%/../vendor/jquery/jquery/jquery-2.1.1.js
    customize:
        variables_file: %kernel.root_dir%/Resources/sass/variables.sass

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true

sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.image
                - sonata.media.provider.file
                #- sonata.media.provider.youtube
                #- sonata.media.provider.vimeo
                #- sonata.media.provider.dailymotion

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}

        news:
            providers:
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 170 , quality: 95}
                big:   { width: 500 , quality: 90}
            
        trainer:
            providers:
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 100 , quality: 95}
                big:   { width: 500 , quality: 90}
            
    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false

stof_doctrine_extensions:
    default_locale: hu
    orm:
        default:
#            timestampable: true
#            softdeleteable: true
            sluggable: true

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

sonata_block:
    default_contexts: [sonata_page_bundle]
    blocks:
        sonata.admin.block.admin_list:
            contexts:   [admin]

        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text: # used to if you plan to use Sonata user routes

#        dn.tm.block.trainer: ~
#        dn.tm.block.news: ~
#        dn.tm.block.article: ~
#        dn.tm.block.article_combo: ~
#        dn.tm.block.custom: ~
#        dn.tm.block.product_search: ~
#        dn.tm.block.newsletter: ~
#        dn.tm.block.faq: ~
#        dn.tm.block.contact: ~
#        dn.tm.block.consulant: ~
#        dn.tm.block.education_program: ~
#        dn.tm.block.video: ~

ivory_ck_editor:
    default_config: default
    configs:
        default:
            filebrowserBrowseRoute: admin_sonata_media_media_ckeditor_browser
            filebrowserImageBrowseRoute: admin_sonata_media_media_ckeditor_browser
            # Display images by default when clicking the image dialog browse button
            filebrowserImageBrowseRouteParameters:
                provider: sonata.media.provider.image
            filebrowserUploadRoute: admin_sonata_media_media_ckeditor_upload
            filebrowserUploadRouteParameters:
                provider: sonata.media.provider.file
            # Upload file as image when sending a file from the image dialog
            filebrowserImageUploadRoute: admin_sonata_media_media_ckeditor_upload
            filebrowserImageUploadRouteParameters:
                provider: sonata.media.provider.image

    styles:
        tm_styles:
            - { name: "Textblock", element: "div", attributes: { class: "textblock" } }

fos_user:
    db_driver: orm
    firewall_name: main
#    user_class: DN\TMBundle\Entity\User
    user_class: Application\Sonata\UserBundle\Entity\User

    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager

    service:
        user_manager: sonata.user.orm.user_manager
        
sonata_user:
    security_acl: true
    manager_type: orm

sonata_admin:
    security:
        handler: sonata.admin.security.handler.acl
        # acl security information
        information:
            GUEST:    [VIEW, LIST]
            STAFF:    [EDIT, LIST, CREATE]
            EDITOR:   [OPERATOR, EXPORT]
            ADMIN:    [MASTER]
        # permissions not related to an object instance and also to be available when objects do not exist
        # the DELETE admin permission means the user is allowed to batch delete objects
        admin_permissions: [CREATE, LIST, DELETE, UNDELETE, EXPORT, OPERATOR, MASTER]
        # permission related to the objects
        object_permissions: [VIEW, EDIT, DELETE, UNDELETE, OPERATOR, MASTER, OWNER]

